package com.e_Commerce_app_group.e_commerce_dashboard.controllers;

import com.e_Commerce_app_group.e_commerce_dashboard.Pojos.LoginEntity;
import com.e_Commerce_app_group.e_commerce_dashboard.Pojos.SignUpEntity;
import com.e_Commerce_app_group.e_commerce_dashboard.services.LoginService;
import com.e_Commerce_app_group.e_commerce_dashboard.services.UserDetailServiceImpl;
import com.e_Commerce_app_group.e_commerce_dashboard.utils.JwtUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

//spring security
//authentication
//who has authorised to used resources
//authorization
//which resources a person can access
//client sends authentication header (authorization )basic encoded string (base 64)technique
//server decode and outhorisation
//sering security dependency added
//after aded dependency all the endpoint will be secured
//so spring gives us default user and password or access api
//postman->auth->basic auth->user and password generated by spriing in console


@Slf4j
@RestController
@RequestMapping("/login")
public class LoginController {
    //jwt
    @Autowired
    private AuthenticationManager authenticationManager;
    private static final PasswordEncoder passwordencoder=new BCryptPasswordEncoder();
    @Autowired
    private LoginService logionService;
    @Autowired
    private JwtUtil jwtUtil;
    @Autowired
    private UserDetailServiceImpl userDetailService;
    @PostMapping
    public ResponseEntity<String> signUp(@RequestBody LoginEntity user){
//        SignUpEntity dbuser =logionService.checkUser(user.getEmail());
//        if(dbuser == null){
//            return "email not found";
//        }
//
//
//        if(passwordencoder.matches(user.getPassword(), dbuser.getPassword())){
            try {


                authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(user.getEmail(), user.getPassword()));
                UserDetails userDetails=userDetailService.loadUserByUsername(user.getEmail());
                String jwt= jwtUtil.generateToken(userDetails.getUsername());
//                return "login successfully";
                return new ResponseEntity<>(jwt, HttpStatus.OK);

            } catch (AuthenticationException e) {
                log.error("Exception orrured while create authentication token",e);
                return new ResponseEntity<>("incorrect username and password", HttpStatus.BAD_REQUEST);
            }

//        }
//        else{
//            return "incorrect password";
//        }
//
//
//
    }

}
